syntax = "proto2";

package zlog_proto;

option optimize_for = SPEED;

message View {
  // the minimum (inclusive) log position that maps to this view. the upper
  // limit is bound by the next view in the view set, and is +inf for the most
  // recent view.
  required uint64 position = 1;

  // the number of objects that the log is striped across.
  required uint32 width = 2;

  // single-writer mode. when the exclusive_cookie field is not specified, then
  // clients rely on a external sequencer service. when a value for the
  // exclusive_cookie field is specified, the client whose proposed change was
  // accepted is allowed to enter into a single-writer mode in which it becomes
  // its own sequencer. it is critical that this value be unique. one way to do
  // this is to encode the next_epoch in the string which is guaranteed to be
  // unique if it is accepted.
  optional string exclusive_cookie = 3;
}

message MSeqRequest {
    required uint64 epoch = 1;
    required string pool = 2;
    required string name = 3;
    required bool next = 4;
    required uint32 count = 5;
    repeated uint64 stream_ids = 6 [packed = true];
}

message StreamBackPointer {
    required uint64 id = 1;
    repeated uint64 backpointer = 2 [packed = true];
}

message MSeqReply {
    enum Status {
        OK = 0;
        INIT_LOG = 1;
        STALE_EPOCH = 2;
    }
    repeated uint64 position = 1 [packed = true];
    optional Status status = 2 [default = OK];
    repeated StreamBackPointer stream_backpointers = 3;
}

message EntryHeader {
  repeated StreamBackPointer stream_backpointers = 1;
};
