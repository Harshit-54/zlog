////////////////////////////////////////////////////////////////////////////////

entries(Obj, Position, Value)@next :- entries(Obj, Position, Value);
valid_entries(Obj, Position, Value) :- entries(Obj, Position, Value),
                                       Value != "__INVAL__";

// reply to `req_maxpos` request. the two `rep_maxpos` relations have mutually
// exclusive rules such that an object with no entries will return maxpos = 1.
max_pos(Obj, max<Position>)            :- valid_entries(Obj, Position, _);
rep_maxpos(Src, Obj, MaxPos + 1)@async :- req_maxpos(Obj, Src), max_pos(Obj, MaxPos);
rep_maxpos(Src, Obj, 1)@async          :- req_maxpos(Obj, Src), notin max_pos(Obj, _);

////////////////////////////////////////////////////////////////////////////////
// Sequencer Initialization
////////////////////////////////////////////////////////////////////////////////

req_maxpos(Obj, Seq)@async :- object(Seq, Obj), notin seq(Seq, _);

// record all maxpos replies until the sequencer is initialized
maxpos_replies(Server, Obj, MaxPos)      :- rep_maxpos(Server, Obj, MaxPos),
                                            notin seq(Server, _);
maxpos_replies(Server, Obj, MaxPos)@next :- maxpos_replies(Server, Obj, MaxPos),
                                            notin seq(Server, _);

// from which objects are replies missing
missing_replies(Server) :- object(Server, Obj),
                           notin maxpos_replies(Server, Obj, _);

// maximum position computed from all maxpos replies, provided that
// we are not missing replies from any object.
maxpos(Server, max<MaxPos>) :- maxpos_replies(Server, _, MaxPos),
                               notin missing_replies(Server);

// assertion error in C4: seq(Server, MaxPos)  :- maxpos(Server, MaxPos);
seq(Server, MaxPos)@next  :- maxpos(Server, MaxPos);

seq(Server, Seq)@next :- seq(Server, Seq),
                         notin req_next(Server, _, _);

seq(Server, Seq + 1)@next :- seq(Server, Seq),
                             req_next(Server, _, _);

rep_next(Client, Server, Seq, Value)@async :- seq(Server, Seq),
                                              req_next(Server, Client, Value);

////////////////////////////////////////////////////////////////////////////////

// send requests to the sequencer until we get a reply
need_req(Client, Server, Value) :- client_req(Client, Server, Value),
                                   notin rep_next(Client, Server, _, Value);
req_next(Server, Client, Value)@async :- need_req(Client, Server, Value);
client_req(Client, Server, Value)@next :- need_req(Client, Server, Value);

////////////////////////////////////////////////////////////////////////////////

pre(S, Q) :- seq(S, Q);
post(S, Q) :- pre(S, Q);

client_req("c0", "s0", "v0")@1;

// nodes know about all the objects
object("s0", "o0")@1;
object("s0", "o1")@1;
//object("s0", "o2")@1;
object(Node, Obj)@next :- object(Node, Obj);

entries("o0", 0, "__INVAL__")@1;
entries("o1", 0, "__INVAL__")@1;
//entries("o2", 0, "__INVAL__")@1;
